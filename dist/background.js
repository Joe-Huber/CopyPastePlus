(()=>{"use strict";({17:function(){var e=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))(function(n,i){function c(e){try{a(r.next(e))}catch(e){i(e)}}function s(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o(function(e){e(t)})).then(c,s)}a((r=r.apply(e,t||[])).next())})};function t(e){chrome.storage.local.get({copiedItems:[]},t=>{console.log("Current items from storage:",t.copiedItems);let o=t.copiedItems;o.length>0&&"string"==typeof o[0]&&(o=o.map(e=>({id:self.crypto.randomUUID(),text:e,timestamp:Date.now(),favorite:!1,count:1})));const r=o.findIndex(t=>t.text===e);if(-1!==r)o[r].timestamp=Date.now(),o[r].count++;else{const t={id:self.crypto.randomUUID(),text:e,timestamp:Date.now(),favorite:!1,count:1};o.push(t)}o.sort((e,t)=>t.timestamp-e.timestamp),o.length>100&&(o=o.slice(0,100)),chrome.storage.local.set({copiedItems:o},()=>{console.log("Updated items saved to storage:",o)})})}function o(t){return e(this,void 0,void 0,function*(){if(chrome.offscreen)try{return void(yield function(t){return new Promise((o,r)=>e(this,void 0,void 0,function*(){try{yield function(){return e(this,void 0,void 0,function*(){const e=chrome.offscreen;if(!e)throw new Error("Offscreen API unavailable in this Chrome version");const t=chrome.runtime.getURL("offscreen.html");try{yield e.createDocument({url:t,reasons:["CLIPBOARD"],justification:"Write text on item click from popup"}),console.log("Offscreen document created")}catch(e){const t=String((null==e?void 0:e.message)||e);if(!/Only one offscreen document|already exists/i.test(t))throw console.error("Failed to create offscreen document",e),e;console.log("Offscreen document already exists")}})}();const n=self.crypto.randomUUID(),i=e=>{e&&"write-clipboard-result"===e.type&&e.requestId===n&&(chrome.runtime.onMessage.removeListener(i),e.ok?o():r(new Error(e.error||"Clipboard write failed")))};chrome.runtime.onMessage.addListener(i),chrome.runtime.sendMessage({type:"write-clipboard",text:t,requestId:n}),setTimeout(()=>{chrome.runtime.onMessage.removeListener(i),r(new Error("Clipboard write timed out"))},4e3)}catch(e){r(e)}}))}(t))}catch(e){console.warn("Offscreen copy failed, falling back to tab injection",e)}yield function(t){return e(this,void 0,void 0,function*(){const e=yield chrome.tabs.query({active:!0,lastFocusedWindow:!0}),o=e&&e[0];if(!o||!o.id)throw new Error("No active tab available to perform clipboard copy");const r=yield chrome.scripting.executeScript({target:{tabId:o.id},args:[t],func:e=>{try{if(navigator.clipboard&&navigator.clipboard.writeText)return navigator.clipboard.writeText(e).then(()=>!0).catch(()=>!1)}catch(e){}try{const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.opacity="0",document.body.appendChild(t),t.focus(),t.select();const o=document.execCommand("copy");return document.body.removeChild(t),o}catch(e){return!1}},world:"MAIN"});let n=!1;if(Array.isArray(r)&&r[0]){const e=r[0].result;if(e&&"function"==typeof e.then)try{n=yield e}catch(e){n=!1}else n=!!e}if(!n)throw new Error("Active tab clipboard copy failed")})}(t)})}chrome.runtime.onMessage.addListener((e,r,n)=>{if(console.log("Background script received a message:",e),"copiedText"===e.type&&t(e.text),"popupCopy"===e.type){const r=e.text;return o(r).then(()=>{t(r),n({ok:!0})}).catch(e=>{console.error("popupCopy failed",e),n({ok:!1,error:String(e)})}),!0}})}})[17]()})();